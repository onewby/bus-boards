/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPointSequence {
    #[serde(rename = "lineId", skip_serializing_if = "Option::is_none")]
    pub line_id: Option<String>,
    #[serde(rename = "lineName", skip_serializing_if = "Option::is_none")]
    pub line_name: Option<String>,
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// The id of this branch.
    #[serde(rename = "branchId", skip_serializing_if = "Option::is_none")]
    pub branch_id: Option<i32>,
    /// The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
    #[serde(rename = "nextBranchIds", skip_serializing_if = "Option::is_none")]
    pub next_branch_ids: Option<Vec<i32>>,
    /// The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
    #[serde(rename = "prevBranchIds", skip_serializing_if = "Option::is_none")]
    pub prev_branch_ids: Option<Vec<i32>>,
    #[serde(rename = "stopPoint", skip_serializing_if = "Option::is_none")]
    pub stop_point: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMatchedStop>>,
    #[serde(rename = "serviceType", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<ServiceType>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPointSequence {
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPointSequence {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPointSequence {
            line_id: None,
            line_name: None,
            direction: None,
            branch_id: None,
            next_branch_ids: None,
            prev_branch_ids: None,
            stop_point: None,
            service_type: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "Regular")]
    Regular,
    #[serde(rename = "Night")]
    Night,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::Regular
    }
}

