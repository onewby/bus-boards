/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPoint {
    #[serde(rename = "naptanId", skip_serializing_if = "Option::is_none")]
    pub naptan_id: Option<String>,
    #[serde(rename = "platformName", skip_serializing_if = "Option::is_none")]
    pub platform_name: Option<String>,
    /// The indicator of the stop point e.g. \"Stop K\"
    #[serde(rename = "indicator", skip_serializing_if = "Option::is_none")]
    pub indicator: Option<String>,
    /// The stop letter, if it could be cleansed from the Indicator e.g. \"K\"
    #[serde(rename = "stopLetter", skip_serializing_if = "Option::is_none")]
    pub stop_letter: Option<String>,
    #[serde(rename = "modes", skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    #[serde(rename = "icsCode", skip_serializing_if = "Option::is_none")]
    pub ics_code: Option<String>,
    #[serde(rename = "smsCode", skip_serializing_if = "Option::is_none")]
    pub sms_code: Option<String>,
    #[serde(rename = "stopType", skip_serializing_if = "Option::is_none")]
    pub stop_type: Option<String>,
    #[serde(rename = "stationNaptan", skip_serializing_if = "Option::is_none")]
    pub station_naptan: Option<String>,
    #[serde(rename = "accessibilitySummary", skip_serializing_if = "Option::is_none")]
    pub accessibility_summary: Option<String>,
    #[serde(rename = "hubNaptanCode", skip_serializing_if = "Option::is_none")]
    pub hub_naptan_code: Option<String>,
    #[serde(rename = "lines", skip_serializing_if = "Option::is_none")]
    pub lines: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodIdentifier>>,
    #[serde(rename = "lineGroup", skip_serializing_if = "Option::is_none")]
    pub line_group: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodLineGroup>>,
    #[serde(rename = "lineModeGroups", skip_serializing_if = "Option::is_none")]
    pub line_mode_groups: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodLineModeGroup>>,
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "naptanMode", skip_serializing_if = "Option::is_none")]
    pub naptan_mode: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<bool>,
    #[serde(rename = "individualStopId", skip_serializing_if = "Option::is_none")]
    pub individual_stop_id: Option<String>,
    /// A unique identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The unique location of this resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// A human readable name.
    #[serde(rename = "commonName", skip_serializing_if = "Option::is_none")]
    pub common_name: Option<String>,
    /// The distance of the place from its search point, if this is the result              of a geographical search, otherwise zero.
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<f64>,
    /// The type of Place. See /Place/Meta/placeTypes for possible values.
    #[serde(rename = "placeType", skip_serializing_if = "Option::is_none")]
    pub place_type: Option<String>,
    /// A bag of additional key/value pairs with extra information about this place.
    #[serde(rename = "additionalProperties", skip_serializing_if = "Option::is_none")]
    pub additional_properties: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodAdditionalProperties>>,
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodPlace>>,
    #[serde(rename = "childrenUrls", skip_serializing_if = "Option::is_none")]
    pub children_urls: Option<Vec<String>>,
    /// WGS84 latitude of the location.
    #[serde(rename = "lat", skip_serializing_if = "Option::is_none")]
    pub lat: Option<f64>,
    /// WGS84 longitude of the location.
    #[serde(rename = "lon", skip_serializing_if = "Option::is_none")]
    pub lon: Option<f64>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPoint {
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPoint {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodStopPoint {
            naptan_id: None,
            platform_name: None,
            indicator: None,
            stop_letter: None,
            modes: None,
            ics_code: None,
            sms_code: None,
            stop_type: None,
            station_naptan: None,
            accessibility_summary: None,
            hub_naptan_code: None,
            lines: None,
            line_group: None,
            line_mode_groups: None,
            full_name: None,
            naptan_mode: None,
            status: None,
            individual_stop_id: None,
            id: None,
            url: None,
            common_name: None,
            distance: None,
            place_type: None,
            additional_properties: None,
            children: None,
            children_urls: None,
            lat: None,
            lon: None,
        }
    }
}

