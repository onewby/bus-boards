/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodFaresPeriodFareDetails {
    #[serde(rename = "boundsId", skip_serializing_if = "Option::is_none")]
    pub bounds_id: Option<i32>,
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "passengerType", skip_serializing_if = "Option::is_none")]
    pub passenger_type: Option<String>,
    #[serde(rename = "contactlessPAYGOnlyFare", skip_serializing_if = "Option::is_none")]
    pub contactless_payg_only_fare: Option<bool>,
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    #[serde(rename = "fromStation", skip_serializing_if = "Option::is_none")]
    pub from_station: Option<String>,
    #[serde(rename = "toStation", skip_serializing_if = "Option::is_none")]
    pub to_station: Option<String>,
    #[serde(rename = "via", skip_serializing_if = "Option::is_none")]
    pub via: Option<String>,
    #[serde(rename = "routeCode", skip_serializing_if = "Option::is_none")]
    pub route_code: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "displayOrder", skip_serializing_if = "Option::is_none")]
    pub display_order: Option<i32>,
    #[serde(rename = "routeDescription", skip_serializing_if = "Option::is_none")]
    pub route_description: Option<String>,
    #[serde(rename = "validatorInformation", skip_serializing_if = "Option::is_none")]
    pub validator_information: Option<String>,
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    #[serde(rename = "specialFare", skip_serializing_if = "Option::is_none")]
    pub special_fare: Option<bool>,
    #[serde(rename = "throughFare", skip_serializing_if = "Option::is_none")]
    pub through_fare: Option<bool>,
    #[serde(rename = "isTour", skip_serializing_if = "Option::is_none")]
    pub is_tour: Option<bool>,
    #[serde(rename = "ticketsAvailable", skip_serializing_if = "Option::is_none")]
    pub tickets_available: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodFaresPeriodTicket>>,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMessage>>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodFaresPeriodFareDetails {
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodFaresPeriodFareDetails {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodFaresPeriodFareDetails {
            bounds_id: None,
            start_date: None,
            end_date: None,
            mode: None,
            passenger_type: None,
            contactless_payg_only_fare: None,
            from: None,
            to: None,
            from_station: None,
            to_station: None,
            via: None,
            route_code: None,
            display_name: None,
            display_order: None,
            route_description: None,
            validator_information: None,
            operator: None,
            special_fare: None,
            through_fare: None,
            is_tour: None,
            tickets_available: None,
            messages: None,
        }
    }
}

