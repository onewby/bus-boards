/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodRoadCorridor {
    /// The Id of the Corridor e.g. \"A406\"
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The display name of the Corridor e.g. \"North Circular (A406)\". This              may be identical to the Id.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The group name of the Corridor e.g. \"Central London\". Most corridors are not grouped, in which case this field can be null.
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Standard multi-mode status severity code
    #[serde(rename = "statusSeverity", skip_serializing_if = "Option::is_none")]
    pub status_severity: Option<String>,
    /// Description of the status severity as applied to RoadCorridors
    #[serde(rename = "statusSeverityDescription", skip_serializing_if = "Option::is_none")]
    pub status_severity_description: Option<String>,
    /// The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\"
    #[serde(rename = "bounds", skip_serializing_if = "Option::is_none")]
    pub bounds: Option<String>,
    /// The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\"
    #[serde(rename = "envelope", skip_serializing_if = "Option::is_none")]
    pub envelope: Option<String>,
    /// The start of the period over which status has been aggregated, or null if this is the current corridor status.
    #[serde(rename = "statusAggregationStartDate", skip_serializing_if = "Option::is_none")]
    pub status_aggregation_start_date: Option<String>,
    /// The end of the period over which status has been aggregated, or null if this is the current corridor status.
    #[serde(rename = "statusAggregationEndDate", skip_serializing_if = "Option::is_none")]
    pub status_aggregation_end_date: Option<String>,
    /// URL to retrieve this Corridor.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodRoadCorridor {
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodRoadCorridor {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodRoadCorridor {
            id: None,
            display_name: None,
            group: None,
            status_severity: None,
            status_severity_description: None,
            bounds: None,
            envelope: None,
            status_aggregation_start_date: None,
            status_aggregation_end_date: None,
            url: None,
        }
    }
}

