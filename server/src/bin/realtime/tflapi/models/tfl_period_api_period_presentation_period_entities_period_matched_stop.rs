/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMatchedStop {
    #[serde(rename = "routeId", skip_serializing_if = "Option::is_none")]
    pub route_id: Option<i32>,
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "stationId", skip_serializing_if = "Option::is_none")]
    pub station_id: Option<String>,
    #[serde(rename = "icsId", skip_serializing_if = "Option::is_none")]
    pub ics_id: Option<String>,
    #[serde(rename = "topMostParentId", skip_serializing_if = "Option::is_none")]
    pub top_most_parent_id: Option<String>,
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(rename = "towards", skip_serializing_if = "Option::is_none")]
    pub towards: Option<String>,
    #[serde(rename = "modes", skip_serializing_if = "Option::is_none")]
    pub modes: Option<Vec<String>>,
    #[serde(rename = "stopType", skip_serializing_if = "Option::is_none")]
    pub stop_type: Option<String>,
    #[serde(rename = "stopLetter", skip_serializing_if = "Option::is_none")]
    pub stop_letter: Option<String>,
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
    #[serde(rename = "accessibilitySummary", skip_serializing_if = "Option::is_none")]
    pub accessibility_summary: Option<String>,
    #[serde(rename = "hasDisruption", skip_serializing_if = "Option::is_none")]
    pub has_disruption: Option<bool>,
    #[serde(rename = "lines", skip_serializing_if = "Option::is_none")]
    pub lines: Option<Vec<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodIdentifier>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "lat", skip_serializing_if = "Option::is_none")]
    pub lat: Option<f64>,
    #[serde(rename = "lon", skip_serializing_if = "Option::is_none")]
    pub lon: Option<f64>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMatchedStop {
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMatchedStop {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodMatchedStop {
            route_id: None,
            parent_id: None,
            station_id: None,
            ics_id: None,
            top_most_parent_id: None,
            direction: None,
            towards: None,
            modes: None,
            stop_type: None,
            stop_letter: None,
            zone: None,
            accessibility_summary: None,
            has_disruption: None,
            lines: None,
            status: None,
            id: None,
            url: None,
            name: None,
            lat: None,
            lon: None,
        }
    }
}

