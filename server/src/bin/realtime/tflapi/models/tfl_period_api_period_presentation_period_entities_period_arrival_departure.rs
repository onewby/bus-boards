/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::tflapi::models;
use serde::{Deserialize, Serialize};

/// TflPeriodApiPeriodPresentationPeriodEntitiesPeriodArrivalDeparture : DTO to capture the prediction details
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TflPeriodApiPeriodPresentationPeriodEntitiesPeriodArrivalDeparture {
    /// Platform name (for bus, this is the stop letter)
    #[serde(rename = "platformName", skip_serializing_if = "Option::is_none")]
    pub platform_name: Option<String>,
    /// Naptan Identifier for the prediction's destination
    #[serde(rename = "destinationNaptanId", skip_serializing_if = "Option::is_none")]
    pub destination_naptan_id: Option<String>,
    /// Name of the destination
    #[serde(rename = "destinationName", skip_serializing_if = "Option::is_none")]
    pub destination_name: Option<String>,
    /// Identifier for the prediction
    #[serde(rename = "naptanId", skip_serializing_if = "Option::is_none")]
    pub naptan_id: Option<String>,
    /// Station name
    #[serde(rename = "stationName", skip_serializing_if = "Option::is_none")]
    pub station_name: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "estimatedTimeOfArrival", skip_serializing_if = "Option::is_none")]
    pub estimated_time_of_arrival: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "scheduledTimeOfArrival", skip_serializing_if = "Option::is_none")]
    pub scheduled_time_of_arrival: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "estimatedTimeOfDeparture", skip_serializing_if = "Option::is_none")]
    pub estimated_time_of_departure: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "scheduledTimeOfDeparture", skip_serializing_if = "Option::is_none")]
    pub scheduled_time_of_departure: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "minutesAndSecondsToArrival", skip_serializing_if = "Option::is_none")]
    pub minutes_and_seconds_to_arrival: Option<String>,
    /// Estimated time of arrival
    #[serde(rename = "minutesAndSecondsToDeparture", skip_serializing_if = "Option::is_none")]
    pub minutes_and_seconds_to_departure: Option<String>,
    /// Reason for cancellation or delay
    #[serde(rename = "cause", skip_serializing_if = "Option::is_none")]
    pub cause: Option<String>,
    /// Status of departure
    #[serde(rename = "departureStatus", skip_serializing_if = "Option::is_none")]
    pub departure_status: Option<DepartureStatus>,
    #[serde(rename = "timing", skip_serializing_if = "Option::is_none")]
    pub timing: Option<Box<models::TflPeriodApiPeriodPresentationPeriodEntitiesPeriodPredictionTiming>>,
}

impl TflPeriodApiPeriodPresentationPeriodEntitiesPeriodArrivalDeparture {
    /// DTO to capture the prediction details
    pub fn new() -> TflPeriodApiPeriodPresentationPeriodEntitiesPeriodArrivalDeparture {
        TflPeriodApiPeriodPresentationPeriodEntitiesPeriodArrivalDeparture {
            platform_name: None,
            destination_naptan_id: None,
            destination_name: None,
            naptan_id: None,
            station_name: None,
            estimated_time_of_arrival: None,
            scheduled_time_of_arrival: None,
            estimated_time_of_departure: None,
            scheduled_time_of_departure: None,
            minutes_and_seconds_to_arrival: None,
            minutes_and_seconds_to_departure: None,
            cause: None,
            departure_status: None,
            timing: None,
        }
    }
}
/// Status of departure
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DepartureStatus {
    #[serde(rename = "OnTime")]
    OnTime,
    #[serde(rename = "Delayed")]
    Delayed,
    #[serde(rename = "Cancelled")]
    Cancelled,
    #[serde(rename = "NotStoppingAtStation")]
    NotStoppingAtStation,
}

impl Default for DepartureStatus {
    fn default() -> DepartureStatus {
        Self::OnTime
    }
}

