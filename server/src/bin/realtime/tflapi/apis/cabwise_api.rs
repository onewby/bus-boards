/*
 * Transport for London Unified API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::tflapi::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`cabwise_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CabwiseGetError {
    UnknownValue(serde_json::Value),
}


pub async fn cabwise_get(configuration: &configuration::Configuration, lat: f64, lon: f64, optype: Option<&str>, wc: Option<&str>, radius: Option<f64>, name: Option<&str>, max_results: Option<i32>, legacy_format: Option<bool>, force_xml: Option<bool>, twenty_four_seven_only: Option<bool>) -> Result<serde_json::Value, Error<CabwiseGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Cabwise/search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("lat", &lat.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lon", &lon.to_string())]);
    if let Some(ref local_var_str) = optype {
        local_var_req_builder = local_var_req_builder.query(&[("optype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wc {
        local_var_req_builder = local_var_req_builder.query(&[("wc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = radius {
        local_var_req_builder = local_var_req_builder.query(&[("radius", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_results {
        local_var_req_builder = local_var_req_builder.query(&[("maxResults", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = legacy_format {
        local_var_req_builder = local_var_req_builder.query(&[("legacyFormat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = force_xml {
        local_var_req_builder = local_var_req_builder.query(&[("forceXml", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = twenty_four_seven_only {
        local_var_req_builder = local_var_req_builder.query(&[("twentyFourSevenOnly", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CabwiseGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

